/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';

const CACHE_NAME = `cache-${version}`;

// Add all files from $service-worker to the cache
// build includes files generated by Vite (JS, CSS)
// files includes files in your static directory
const ASSETS_TO_CACHE = build.concat(files);

self.addEventListener('install', (event) => {
  console.log('[Service Worker] Install event');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('[Service Worker] Opened cache:', CACHE_NAME);
        return cache.addAll(ASSETS_TO_CACHE);
      })
      .then(() => {
        console.log('[Service Worker] All assets cached. Skip waiting.');
        (self as unknown as ServiceWorkerGlobalScope).skipWaiting();
      })
      .catch(err => {
        console.error('[Service Worker] Cache addAll failed:', err);
      })
  );
});

self.addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate event');
  event.waitUntil(
    caches.keys().then(async (cacheNames) => {
      await Promise.all(
        cacheNames.map(async (cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('[Service Worker] Deleting old cache:', cacheName);
            await caches.delete(cacheName);
          }
        })
      );
      console.log('[Service Worker] Claiming clients.');
      await (self as unknown as ServiceWorkerGlobalScope).clients.claim();
    })
  );
});

self.addEventListener('fetch', (event) => {
  const request = event.request;

  // Ignore non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // For navigation requests (HTML pages), try network first, then cache.
  // This ensures users get the latest page if online, but can still access it offline.
  if (request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          const networkResponse = await fetch(request);
          return networkResponse;
        } catch (error) {
          console.log('[Service Worker] Fetch failed for navigation; returning offline page from cache.', request.url, error);
          const cache = await caches.open(CACHE_NAME);
          // Fallback to the root page. Consider creating a specific offline.html page and caching it.
          const cachedResponse = await cache.match('/') || await cache.match('/index.html');
          if (cachedResponse) {
            return cachedResponse;
          }
          // If no root page in cache, provide a very basic offline response.
          return new Response('You are offline. Please check your internet connection.', {
            status: 408,
            headers: { 'Content-Type': 'text/plain' },
          });
        }
      })()
    );
    return;
  }

  // For other requests (assets like JS, CSS, images), use a cache-first strategy.
  // Serve from cache if available, otherwise fetch from network and optionally cache.
  event.respondWith(
    caches.match(request).then((cachedResponse) => {
      if (cachedResponse) {
        return cachedResponse;
      }
      return fetch(request).then((networkResponse) => {
        // Optionally, you might want to cache new assets dynamically here if they weren't part of the initial ASSETS_TO_CACHE
        // For example, if they are loaded on demand.
        // Be careful with caching opaque responses (cross-origin resources without CORS) as they can take up a lot of space.
        // if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
        //   const responseToCache = networkResponse.clone();
        //   caches.open(CACHE_NAME).then(cache => {
        //     cache.put(request, responseToCache);
        //   });
        // }
        return networkResponse;
      }).catch(error => {
        console.error('[Service Worker] Fetch failed for asset:', request.url, error);
        // For assets, if not in cache and network fails, it results in a broken resource.
        // You could return a placeholder image/style if appropriate.
      });
    })
  );
});
